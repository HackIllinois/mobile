/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/admission/notsent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all admission decisions that have not had an email sent yet
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The decisions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdmissionDecision"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admission/rsvp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets admission rsvp information for the current user
         * @description **Required role: USER**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The admission rsvp information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdmissionDecision"];
                    };
                };
                /** @description Admission rsvp was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "DecisionNotFound";
                            /** @enum {string} */
                            message: "Couldn't find your decision!";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admission/rsvp/staff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets admission rsvps for all users
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All admission rsvps */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdmissionDecision"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admission/rsvp/{decision}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * RSVP with a accept or decline decision
         * @description **Required role: USER**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    decision: "accept" | "decline";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The updated decision */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdmissionDecision"];
                    };
                };
                /** @description Not accepted so can't make a decision */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotAccepted";
                            /** @enum {string} */
                            message: "You weren't accepted, you cannot accept/decline this decision";
                        };
                    };
                };
                /** @description One of:
                 *     - DecisionNotFound: Couldn't find user's decision
                 *     - NotFound: Couldn't find user's application
                 *
                 *     **See examples dropdown below** */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "DecisionNotFound";
                            /** @enum {string} */
                            message: "Couldn't find your decision!";
                        } | {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find your registration";
                        };
                    };
                };
                /** @description Already RSVPd */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadyRSVPed";
                            /** @enum {string} */
                            message: "You've already RSVPed!";
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admission/rsvp/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets admission rsvp information for the specified user
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The admission rsvp information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdmissionDecision"];
                    };
                };
                /** @description Admission rsvp was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "DecisionNotFound";
                            /** @enum {string} */
                            message: "Couldn't find your decision!";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admission/update/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Updates the decision status of specified applicants
         * @description **Required role: STAFF**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AdmissionDecisionUpdate"][];
                };
            };
            responses: {
                /** @description Successfully updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
                /** @description A applicant's application was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find your registration";
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login/{provider}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Initiates a login through an authentication provider
         * @description **Required role: null**
         *
         *     You should redirect the browser here to initate the login process. Attendees authenticate through GitHub, and staff authenticate through Google. The redirect parameter must be a URL with a valid origin. After successful authentication, the user will be redirected to the provided URL with JWT set as an HTTP-only cookie.
         */
        get: {
            parameters: {
                query: {
                    redirect: components["schemas"]["RedirectUrl"];
                };
                header?: never;
                path: {
                    provider: components["schemas"]["Provider"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful redirect to authentication provider */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The redirect url requested is invalid */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "BadRedirectUrl";
                            /** @enum {string} */
                            message: "The redirect url provided is invalid";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logs out the currently authenticated user
         * @description **Required role: null**
         *
         *     Clears the JWT authentication cookie, effectively logging out the user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully logged out */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/roles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the roles of the currently authenticated user
         * @description **Required role: USER**
         *
         *     Possible roles: ADMIN, STAFF, MENTOR, APPLICANT, ATTENDEE, USER, SPONSOR, BLOBSTORE, PRO
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The roles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Roles"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/roles/list/{role}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all users that have the specified role
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    role: components["schemas"]["Role"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The user ids that have the specified role */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListRoles"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/roles/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the roles of the specified user
         * @description **Required role: STAFF**
         *
         *     Staff-only because this is used to get roles of another user. To get the roles of the currently authenticated user, use `GET /auth/roles/` instead.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The roles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Roles"];
                    };
                };
                /** @description Couldn't find the user specified */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Failed to find user";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/roles/{id}/{role}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Adds a role to a user
         * @description **Required role: ADMIN**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                    role: components["schemas"]["Role"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The updated roles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Roles"];
                    };
                };
                /** @description Couldn't find the user specified */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Failed to find user";
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Removes a role from a user
         * @description **Required role: ADMIN**
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                    role: components["schemas"]["Role"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The updated roles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Roles"];
                    };
                };
                /** @description Couldn't find the user specified */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Failed to find user";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sponsor/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logs in with a code
         * @description **Required role: null**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SponsorLoginRequest"];
                };
            };
            responses: {
                /** @description Successfully logged in, returns the auth token for future requests */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
                /** @description The email or code sent was invalid */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "BadCode";
                            /** @enum {string} */
                            message: "The code entered was invalid";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sponsor/verify/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sends a code to a sponsor email
         * @description **Required role: null**
         *
         *     For security reasons, there is no confirmation on if an email was actually sent or not
         */
        post: {
            parameters: {
                query: {
                    email: components["schemas"]["SponsorEmail"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sent a code if the email provided was valid */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Extract JWT from authentication cookie
         * @description **Required role: USER**
         *
         *     Allows mobile apps to extract their JWT from the HTTP-only cookie
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description JWT token */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            jwt: string;
                        };
                    };
                };
                /** @description No valid authentication cookie found */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AuthenticationFailed";
                            /** @enum {string} */
                            message: "Failed to authenticate (did the login session expire?) - please try again";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/{provider}/callback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * DO NOT CALL. Authentication providers call this after a successful authentication.
         * @description **Required role: null**
         *
         *     **You should not ever use this directly.** Authentication providers use this endpoint to determine where to send the authentication data. Sets JWT and refresh tokens as HTTP-only cookies and redirects to the client URL.
         */
        get: {
            parameters: {
                query: {
                    state: components["schemas"]["RedirectUrl"];
                };
                header?: never;
                path: {
                    provider: components["schemas"]["Provider"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful redirect with cookies set */
                302: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description The redirect url requested is invalid */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "BadRedirectUrl";
                            /** @enum {string} */
                            message: "The redirect url provided is invalid";
                        };
                    };
                };
                /** @description Authorization failed */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AuthenticationFailed";
                            /** @enum {string} */
                            message: "Failed to authenticate (did the login session expire?) - please try again";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all events
         * @description **Required role: null**
         *
         *     The events returned are filtered based on what the currently authenticated user can access.
         *     For example, if the currently authenticated user is not staff, staff events will not be shown.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Events"];
                    };
                };
            };
        };
        /**
         * Update a event
         * @description **Required role: ADMIN**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateEventRequest"];
                };
            };
            responses: {
                /** @description The updated event */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"];
                    };
                };
                /** @description Couldn't find the event to update */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        /**
         * Create a new event
         * @description **Required role: ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateEventRequest"];
                };
            };
            responses: {
                /** @description The new event */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/attendees/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all the attendees of an event
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["EventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The attendees */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventAttendees"];
                    };
                };
                /** @description Couldn't find the event specified */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/followers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all the followers of an event
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["EventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The followers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventFollowers"];
                    };
                };
                /** @description Couldn't find the event specified */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/staff/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all staff events
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Events"];
                    };
                };
                /** @description Couldn't find the event specified */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets details of an event
         * @description **Required role: null**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["EventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The event */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"];
                    };
                };
                /** @description Couldn't find the event specified.
                 *     This also occurs if the user doesn't have permission to view this event. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a event
         * @description **Required role: ADMIN**
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["EventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
                /** @description Couldn't find the event to delete */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail/send/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sends an email
         * @description **Required role: ADMIN**
         *
         *     **WARNING**: This endpoint is not very well documented, so make sure you know what you're doing before you use it directly.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["MailInfo"];
                };
            };
            responses: {
                /** @description The upload url */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MailSendResults"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mentor/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all mentor office hours
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The office hours */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MentorOfficeHours"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a mentor's office hours
         * @description **Required role: STAFF**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["MentorCreateOfficeHours"];
                };
            };
            responses: {
                /** @description The new office hours */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MentorOfficeHours"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mentor/attendance/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Checks into a mentor's office hours
         * @description **Required role: ATTENDEE**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["MentorAttendanceRequest"];
                };
            };
            responses: {
                /** @description Successfully checked in, returns the points rewarded */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description The points rewarded for checking in
                             * @example 5
                             */
                            points: number;
                        };
                    };
                };
                /** @description Already checked in to office hours */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadyCheckedIn";
                            /** @enum {string} */
                            message: "You're already checked in to this event";
                        };
                    };
                };
                /** @description Failed to find the mentor requested */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Failed to find mentor";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mentor/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Deletes the specified mentor's office hours
         * @description **Required role: STAFF**
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["MentorId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
                /** @description Failed to find the mentor requested */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Failed to find mentor";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/newsletter/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all of the newsletter and their subscribers
         * @description **Required role: ADMIN**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully got the subscribers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NewsletterSubscriptions"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/newsletter/subscribe/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Subscribes the requested email to the requested newsletter
         * @description **Required role: null**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SubscribeRequest"];
                };
            };
            responses: {
                /** @description Successfully added email to newsletter */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
            };
        };
        /**
         * Unsubscribes the requested email to the requested newsletter
         * @description **Required role: null**
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SubscribeRequest"];
                };
            };
            responses: {
                /** @description If the email was subscribed, it no longer is. For privacy reasons, whether this email was subscribed or not is hidden. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/newsletter/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a newsletter and it's subscribers
         * @description **Required role: ADMIN**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["NewsletterId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully got the subscribers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NewsletterSubscription"];
                    };
                };
                /** @description That newsletter does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "That newsletter doesn't exist!";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all notifications that have been sent
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All the notifications */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotificationMessages"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Registers a device token to be associate with the currently authenticated user
         * @description **Required role: USER**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RegisterDeviceToken"];
                };
            };
            responses: {
                /** @description Successfully registered */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/send/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sends a notification to a specified group of users
         * @description **Required role: ADMIN**
         *
         *     Can filter by:
         *     - `eventId`: users following a event
         *     - `role`: users that have a role
         *     - `staffShift`: staff in a staff shift
         *     - `foodWave`: users in a food wave
         *     - `userIds`: some set of users
         *     Filters are intersecting, so `eventId = 123` and `foodWave = 1` would get users following event 123 AND in food wave 1.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["NotificationSendRequest"];
                };
            };
            responses: {
                /** @description The result of the sent batch */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotificationSend"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the currently authenticated user's profile
         * @description **Required role: ATTENDEE**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendeeProfile"];
                    };
                };
                /** @description Couldn't find the profile (is it created yet?) */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find the profile";
                        };
                    };
                };
            };
        };
        /**
         * Updates profile of the currently authenticated user
         * @description **Required role: ATTENDEE**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AttendeeProfileUpdateRequest"];
                };
            };
            responses: {
                /** @description The ranking */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendeeProfile"];
                    };
                };
                /** @description Couldn't find  */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find the profile";
                        };
                    };
                };
            };
        };
        /**
         * Creates profile of the currently authenticated user
         * @description **Required role: ATTENDEE**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AttendeeProfileCreateRequest"];
                };
            };
            responses: {
                /** @description The created profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendeeProfile"];
                    };
                };
                /** @description Profile already created */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadyExists";
                            /** @enum {string} */
                            message: "Your profile is already created!";
                        };
                    };
                };
                /** @description Couldn't find registration information */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find your registration";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/leaderboard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the profile leaderboard
         * @description **Required role: null**
         *
         *     This endpoint is limited - you must provide a limit in the range `[1, 25]`, inclusive.
         */
        get: {
            parameters: {
                query?: {
                    limit?: components["schemas"]["ProfileLeaderboardQueryLimit"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The leaderboard */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProfileLeaderboardEntries"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/ranking/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the ranking of the currently authenticated user
         * @description **Required role: ATTENDEE**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The ranking */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendeeProfileRanking"];
                    };
                };
                /** @description Couldn't find the profile (is it created yet?) */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find the profile";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the specified user's profile
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendeeProfile"];
                    };
                };
                /** @description Couldn't find the profile */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find the profile";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/puzzle/create/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create the currently authenticated user's puzzle
         * @description **Required role: USER**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example team team */
                        teamName: string;
                    };
                };
            };
            responses: {
                /** @description The newly created puzzle status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            userId: components["schemas"]["UserId"];
                            /** @example team team */
                            teamName: string;
                            /** @example 123 */
                            lastCorrect: number;
                            /** @example 3 */
                            score: number;
                            /** @example [
                             *       true,
                             *       true,
                             *       false
                             *     ] */
                            problemComplete: boolean[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/puzzle/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the status on the currently authenticated user's puzzle
         * @description **Required role: USER**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            userId: components["schemas"]["UserId"];
                            /** @example team team */
                            teamName: string;
                            /** @example 123 */
                            lastCorrect: number;
                            /** @example 3 */
                            score: number;
                            /** @example [
                             *       true,
                             *       true,
                             *       false
                             *     ] */
                            problemComplete: boolean[];
                        };
                    };
                };
                /** @description The user's puzzle hasn't been created yet */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotCreated";
                            /** @enum {string} */
                            message: "You need to create a puzzle first!";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/puzzle/submit/{qid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submits an answer to a specific question
         * @description **Required role: USER**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    qid: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example tacocat */
                        answer: string;
                    };
                };
            };
            responses: {
                /** @description The new puzzle status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            userId: components["schemas"]["UserId"];
                            /** @example team team */
                            teamName: string;
                            /** @example 123 */
                            lastCorrect: number;
                            /** @example 3 */
                            score: number;
                            /** @example [
                             *       true,
                             *       true,
                             *       false
                             *     ] */
                            problemComplete: boolean[];
                        };
                    };
                };
                /** @description The answer was incorrect */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "IncorrectAnswer";
                            /** @enum {string} */
                            message: "Your answer was incorrect!";
                        };
                    };
                };
                /** @description One of:
                 *     - NotCreated: The user's puzzle hasn't been created yet
                 *     - NotFound: The question requested doesn't exist
                 *
                 *     **See examples dropdown below** */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotCreated";
                            /** @enum {string} */
                            message: "You need to create a puzzle first!";
                        } | {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "That question doesn't exist!";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registration/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the currently authenticated user's registration data
         * @description **Required role: USER**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The registration information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegistrationApplication"];
                    };
                };
                /** @description Couldn't find registration information (make sure you create it first!) */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find your registration";
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Creates or sets the currently authenticated user's registration data
         * @description **Required role: USER**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RegistrationApplicationRequest"];
                };
            };
            responses: {
                /** @description The new registration information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegistrationApplicationRequest"];
                    };
                };
                /** @description Registration is already submitted, cannot update anymore */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadySubmitted";
                            /** @enum {string} */
                            message: "You've already submitted your registration!";
                        };
                    };
                };
                /** @description Registration is closed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "RegistrationClosed";
                            /** @enum {string} */
                            message: "Registration is closed, check back next year!";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registration/challenge/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the challenge input for the currently authenticated user
         * @description **Required role: USER**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The challenge status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegistrationChallengeInput"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Attempts to solve the challenge
         * @description **Required role: USER**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RegistrationChallengeSolve"];
                };
            };
            responses: {
                /** @description Successfully solved, the new challenge status is returned */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegistrationChallengeInput"];
                    };
                };
                /** @description One of:
                 *     - IncorrectSolution: Incorrect answer, try again
                 *     - AlreadySolved: Already solved correctly
                 *
                 *     **See examples dropdown below** */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "IncorrectSolution";
                            /** @enum {string} */
                            message: "That's not the correct answer, try again!";
                        } | {
                            /** @enum {string} */
                            error: "AlreadySolved";
                            /** @enum {string} */
                            message: "You've already solved the challenge!";
                        };
                    };
                };
                /** @description Registration is closed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "RegistrationClosed";
                            /** @enum {string} */
                            message: "Registration is closed, check back next year!";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registration/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the currently authenticated user's registration data
         * @description **Required role: null**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The registration status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegistrationStatus"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registration/submit/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submits the currently authenticated user's registration - permanent
         * @description **Required role: USER**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The new registration information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegistrationApplicationRequest"];
                    };
                };
                /** @description Registration is already submitted, cannot update anymore */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadySubmitted";
                            /** @enum {string} */
                            message: "You've already submitted your registration!";
                        };
                    };
                };
                /** @description Registration is closed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "RegistrationClosed";
                            /** @enum {string} */
                            message: "Registration is closed, check back next year!";
                        };
                    };
                };
                /** @description Couldn't find registration information (make sure you create it first!) */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find your registration";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registration/userid/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the specified user's registration data
         * @description **Required role: STAFF**
         *
         *     Staff-only because this can be used to get any user's registration data.
         *     If you need the currently authenticated user's registration data, use `GET /registration/` instead.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The registration information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RegistrationApplication"];
                    };
                };
                /** @description Couldn't find registration information (make sure you create it first!) */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Couldn't find your registration";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resume/download/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a download url for the resume of the currently authenticated user
         * @description **Required role: USER**
         *
         *     This is a presigned url from s3 that is valid for 60 seconds
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The download url */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ResumeDownloadURL"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resume/download/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a download url for the resume of the specified user
         * @description **Requires one role of: SPONSOR, ADMIN**
         *
         *     This is for a specific user and requires higher permissions, use `GET /resume/download/` for the currently authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The download url */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ResumeDownloadURL"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resume/upload/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a upload url for the resume of the currently authenticated user
         * @description **Required role: USER**
         *
         *     This is a presigned url from s3 that is valid for 60 seconds
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The upload url */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ResumeUploadURL"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all the shop items available
         * @description **Required role: null**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The shop items */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShopItems"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop/cart/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns content of users cart
         * @description **Required role: USER**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of items and quantity */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop/cart/qr/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns qr code of users cart
         * @description **Required role: USER**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description QR code */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderQRCode"];
                    };
                };
                /** @description Not enough quantity in shop */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "InsufficientQuantity";
                            /** @enum {string} */
                            message: "Not enough of that item in the shop!";
                        };
                    };
                };
                /** @description User doesn't have enough points to purchase */
                402: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "InsufficientFunds";
                            /** @enum {string} */
                            message: "You don't have enough points to purchase that item!";
                        };
                    };
                };
                /** @description Shop Item doesn't exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Shop item not found!";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop/cart/redeem/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Purchases the order scanned
         * @description **Required role: STAFF**
         *
         *     Note: Do not pass the full uri (`hackillinois://user?qr=abcd`) but just the QR token part (`abcd`).
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["OrderRedeemRequest"];
                };
            };
            responses: {
                /** @description The successfully purchased order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderRedeem"];
                    };
                };
                /** @description One of:
                 *     - InsufficientQuantity: Not enough quantity in shop
                 *     - QRExpired: QR Code Expired
                 *     - QRInvalid: QR Code Invalid (not expired)
                 *
                 *     **See examples dropdown below** */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "InsufficientQuantity";
                            /** @enum {string} */
                            message: "Not enough of that item in the shop!";
                        } | {
                            /** @enum {string} */
                            error: "QRExpired";
                            /** @enum {string} */
                            message: "Your QR code has expired";
                        } | {
                            /** @enum {string} */
                            error: "QRInvalid";
                            /** @enum {string} */
                            message: "Your QR code is invalid and unable to decrypt";
                        };
                    };
                };
                /** @description Not enough points to purchase */
                402: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "InsufficientFunds";
                            /** @enum {string} */
                            message: "You don't have enough points to purchase that item!";
                        };
                    };
                };
                /** @description Shop Item doesn't exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Shop item not found!";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop/cart/{itemId}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Adds item to users cart
         * @description **Required role: USER**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemId: components["schemas"]["ShopItemId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The successfully updated order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                /** @description Not enough quantity in shop */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "InsufficientQuantity";
                            /** @enum {string} */
                            message: "Not enough of that item in the shop!";
                        };
                    };
                };
                /** @description Not enough points to purchase */
                402: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "InsufficientFunds";
                            /** @enum {string} */
                            message: "You don't have enough points to purchase that item!";
                        };
                    };
                };
                /** @description Shop Item doesn't exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Shop item not found!";
                        };
                    };
                };
            };
        };
        /**
         * Removes a single instance of an item from the user's cart
         * @description **Required role: USER**
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemId: components["schemas"]["ShopItemId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The successfully updated order */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                /** @description Shop Item is not in user's cart */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Shop item not found!";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop/item/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a shop item
         * @description **Required role: ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShopItemCreateRequest"];
                };
            };
            responses: {
                /** @description The new item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShopItem"];
                    };
                };
                /** @description The item already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadyExists";
                            /** @enum {string} */
                            message: "An item with that id already exists, did you mean to update it instead?";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop/item/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Updates a shop item
         * @description **Required role: ADMIN**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["ShopItemId"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShopItemUpdateRequest"];
                };
            };
            responses: {
                /** @description The new item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShopItem"];
                    };
                };
                /** @description Item doesn't exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Shop item not found!";
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Deletes a shop item
         * @description **Required role: ADMIN**
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["ShopItemId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
                /** @description Item doesn't exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Shop item not found!";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shop/raffle/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Raffles a shop item
         * @description **Required role: ADMIN**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["ShopItemId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The raffle winner */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            userId: components["schemas"]["UserId"];
                        };
                    };
                };
                /** @description Item doesn't exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Shop item not found!";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sponsor/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all sponsors
         * @description **Required role: ADMIN**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All sponsors */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Sponsor"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Creates a sponsor
         * @description **Required role: ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateSponsorRequest"];
                };
            };
            responses: {
                /** @description The newly created sponsor */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Sponsor"];
                    };
                };
            };
        };
        /**
         * Deletes a sponsor
         * @description **Required role: ADMIN**
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["DeleteSponsorRequest"];
                };
            };
            responses: {
                /** @description Successfully deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
                /** @description Sponsor not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "Failed to find the sponsor";
                            /** @enum {string} */
                            message: "NotFound";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sponsor/resumebook/pagecount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Counts admitted applicants matching filter criteria and returns page count
         * @description **Requires one role of: SPONSOR, ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ResumeBookFilter"];
                };
            };
            responses: {
                /** @description Total number of pages based on ENTRIES_PER_PAGE */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            pageCount: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sponsor/resumebook/{page}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Returns a page of admitted applicants matching filter criteria
         * @description **Requires one role of: SPONSOR, ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    page: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ResumeBookFilter"];
                };
            };
            responses: {
                /** @description The list of admitted applicants for the specified page */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ResumeBookEntry"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff/attendance/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Checks the currently authenticated staff into the specified staff event
         * @description **Required role: STAFF**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        eventId: components["schemas"]["EventId"];
                    };
                };
            };
            responses: {
                /** @description The scanned user's information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
                /** @description The event is no longer open for check in */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "CodeExpired";
                            /** @enum {string} */
                            message: "The code for this event has expired";
                        };
                    };
                };
                /** @description The specified event was not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff/scan-attendee/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Checks in a user using their encrypted QR code token for a specified event. Note: This is not the full hackillinois:// uri but just the QR token part.
         * @description **Required role: STAFF**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ScanAttendeeRequest"];
                };
            };
            responses: {
                /** @description The scanned user's information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ScanAttendee"];
                    };
                };
                /** @description One of:
                 *     - QRExpired: QR Code Expired
                 *     - QRInvalid: QR Code Invalid (not expired)
                 *     - AlreadyCheckedIn: User already checked in
                 *
                 *     **See examples dropdown below** */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "QRExpired";
                            /** @enum {string} */
                            message: "Your QR code has expired";
                        } | {
                            /** @enum {string} */
                            error: "QRInvalid";
                            /** @enum {string} */
                            message: "Your QR code is invalid and unable to decrypt";
                        } | {
                            /** @enum {string} */
                            error: "AlreadyCheckedIn";
                            /** @enum {string} */
                            message: "You're already checked in to this event";
                        };
                    };
                };
                /** @description attendeeQRCode has expired */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "QRExpired";
                            /** @enum {string} */
                            message: "Your QR code has expired";
                        };
                    };
                };
                /** @description Could not find the event to check into */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff/shift/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets staff shifts for the currently authenticated user
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The shifts */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Shifts"];
                    };
                };
                /** @description User already checked in */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadyCheckedIn";
                            /** @enum {string} */
                            message: "You're already checked in to this event";
                        };
                    };
                };
                /** @description Could not find the event to check into */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Sets the shifts for a specified user
         * @description **Required role: ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        userId: components["schemas"]["UserId"];
                        shifts: components["schemas"]["EventId"][];
                    };
                };
            };
            responses: {
                /** @description Successfully set */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
                /** @description User already checked in */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadyCheckedIn";
                            /** @enum {string} */
                            message: "You're already checked in to this event";
                        };
                    };
                };
                /** @description Could not find the event to check into */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets statistics for a specific time range
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: {
                    before?: number | null;
                    after?: number | null;
                    limit?: components["schemas"]["StatisticLogFilterLimitSchema"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The logs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StatisticLogs"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic/logging/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets if logging is currently enabled
         * @description **Required role: STAFF**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current logging status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StatisticLoggingStatus"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/statistic/logging/{status}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enables or disables logging
         * @description **Required role: ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    status: "enable" | "disable";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated logging status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the user info for the currently authenticated user
         * @description **Required role: USER**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The currently authenticated user's user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserInfo"];
                    };
                };
                /** @description Could not find the user info */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Failed to find user";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/follow/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Follows the specified event
         * @description **Required role: USER**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Events followed after successfully following */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserFollowing"];
                    };
                };
                /** @description Could not find the event to follow */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/following/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the events the currently authenticated user is following
         * @description **Required role: USER**
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The followed events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserFollowing"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/qr/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a QR code for the currently authenticated user
         * @description **Required role: USER**
         *
         *     You should fetch this QR code every 15 seconds, as it expires every 20 seconds.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The currently authenticated user's QR code */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["QRInfo"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/qr/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a QR code for the specified user
         * @description **Required role: STAFF**
         *
         *     This is staff-only since you can get ANY user's QR code with this endpoint.
         *     If you want to get the currently authenticated user's QR code, use `GET /user/qr`.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The specified user's QR code */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["QRInfo"];
                    };
                };
                /** @description Could not find the user specified */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Failed to find user";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/scan-event/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Checks in the currently authenticated user and marks their attendance
         * @description **Required role: USER**
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ScanEventRequest"];
                };
            };
            responses: {
                /** @description Successfully checked in */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ScanEvent"];
                    };
                };
                /** @description User already checked in */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "AlreadyCheckedIn";
                            /** @enum {string} */
                            message: "You're already checked in to this event";
                        };
                    };
                };
                /** @description Could not find the event to check into */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/unfollow/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unfollows the specified event
         * @description **Required role: USER**
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Events followed after successfully unfollowing */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserFollowing"];
                    };
                };
                /** @description Could not find the event to unfollow */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Could not find event";
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the user info for the specified user
         * @description **Required role: STAFF**
         *
         *     This is staff-only since you can get ANY user's info with this endpoint.
         *     To get the currently authenticated user, use `GET /user/`
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["schemas"]["UserId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The specified's user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserInfo"];
                    };
                };
                /** @description Could not find the user info */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            error: "NotFound";
                            /** @enum {string} */
                            message: "Failed to find user";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/android/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the current android version
         * @description **Required role: null**
         *
         *     Note that this version can be set on the admin site
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The current version */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VersionResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/android/{version}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sets the current android version
         * @description **Required role: ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    version: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully set */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/ios/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the current ios version
         * @description **Required role: null**
         *
         *     Note that this version can be set on the admin site
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The current version */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VersionResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version/ios/{version}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sets the current ios version
         * @description **Required role: ADMIN**
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    version: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully set */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AdmissionDecision: {
            userId: components["schemas"]["UserId"];
            /** @enum {string} */
            status: "TBD" | "ACCEPTED" | "REJECTED" | "WAITLISTED";
            /** @example false */
            admittedPro: boolean;
            /** @enum {string} */
            response: "PENDING" | "ACCEPTED" | "DECLINED";
            /** @example false */
            emailSent: boolean;
            reimbursementValue: number;
        };
        AdmissionDecisionUpdate: {
            userId: components["schemas"]["UserId"];
            /** @enum {string} */
            status: "TBD" | "ACCEPTED" | "REJECTED" | "WAITLISTED";
            /** @example false */
            admittedPro: boolean;
            reimbursementValue: number;
        };
        /** @example {
         *       "userId": "google12345",
         *       "displayName": "Bob The Great",
         *       "discordTag": "hackillinois",
         *       "avatarUrl": "https://raw.githubusercontent.com/HackIllinois/adonix-metadata/main/avatars/goblin.png",
         *       "points": 23,
         *       "pointsAccumulated": 104,
         *       "foodWave": 1
         *     } */
        AttendeeProfile: {
            userId: components["schemas"]["UserId"];
            displayName: string;
            avatarUrl: string;
            discordTag: string;
            points: number;
            pointsAccumulated: number;
            foodWave: number;
        };
        /** @example {
         *       "displayName": "Bob The Great",
         *       "discordTag": "hackillinois",
         *       "avatarId": "goblin"
         *     } */
        AttendeeProfileCreateRequest: {
            discordTag: string;
            displayName: string;
            avatarId: string;
        };
        /** @example {
         *       "ranking": 1
         *     } */
        AttendeeProfileRanking: {
            ranking: number;
        };
        /** @example {
         *       "displayName": "Bob The Great",
         *       "discordTag": "hackillinois",
         *       "avatarId": "goblin"
         *     } */
        AttendeeProfileUpdateRequest: {
            discordTag?: string;
            displayName?: string;
            avatarId?: string;
        };
        /** @example {
         *       "name": "Awesome Event",
         *       "description": "A really cool event",
         *       "startTime": 1532202702,
         *       "endTime": 1532212702,
         *       "exp": 1532242900,
         *       "locations": [
         *         {
         *           "description": "Siebel Center for CS",
         *           "latitude": 40.1138,
         *           "longitude": -88.2249
         *         }
         *       ],
         *       "sponsor": "AwesomeSocks",
         *       "eventType": "WORKSHOP",
         *       "points": 10,
         *       "isStaff": false,
         *       "isPrivate": false,
         *       "isAsync": false,
         *       "isPro": false,
         *       "displayOnStaffCheckIn": true,
         *       "mapImageUrl": "example.com/image.png"
         *     } */
        CreateEventRequest: {
            isStaff: boolean;
            name: string;
            description: string;
            startTime: number;
            endTime: number;
            exp?: number;
            /** @enum {string} */
            eventType: "MEAL" | "SPEAKER" | "WORKSHOP" | "MINIEVENT" | "QNA" | "MEETING" | "STAFFSHIFT" | "OTHER";
            locations: components["schemas"]["Location"][];
            isAsync: boolean;
            mapImageUrl?: string;
            sponsor?: string;
            points: number;
            isPrivate: boolean;
            displayOnStaffCheckIn?: boolean;
            isPro: boolean;
        };
        CreateSponsorRequest: {
            email: components["schemas"]["SponsorEmail"];
        };
        DecisionStatistic: {
            accepted: number;
            rejected: number;
            waitlisted: number;
            tbd: number;
        };
        /** @enum {string} */
        Degree: "Associates' Degree" | "Bachelors' Degree " | "Masters' Degree" | "PhD" | "Graduated" | "Other" | "N/A" | "";
        DeleteSponsorRequest: {
            userId: components["schemas"]["UserId"];
        };
        /** @example {
         *       "eventId": "52fdfc072182654f163f5f0f9a621d72",
         *       "name": "Awesome Event",
         *       "description": "A really cool event",
         *       "startTime": 1532202702,
         *       "endTime": 1532212702,
         *       "locations": [
         *         {
         *           "description": "Siebel Center for CS",
         *           "latitude": 40.1138,
         *           "longitude": -88.2249
         *         }
         *       ],
         *       "sponsor": "AwesomeSocks",
         *       "eventType": "WORKSHOP",
         *       "points": 10,
         *       "isStaff": false,
         *       "isPrivate": false,
         *       "isAsync": false,
         *       "isPro": false,
         *       "displayOnStaffCheckIn": true,
         *       "mapImageUrl": "example.com/image.png",
         *       "exp": 12393928829
         *     } */
        Event: {
            eventId: components["schemas"]["EventId"];
            isStaff: boolean;
            name: string;
            description: string;
            startTime: number;
            endTime: number;
            exp?: number;
            /** @enum {string} */
            eventType: "MEAL" | "SPEAKER" | "WORKSHOP" | "MINIEVENT" | "QNA" | "MEETING" | "STAFFSHIFT" | "OTHER";
            locations: components["schemas"]["Location"][];
            isAsync: boolean;
            mapImageUrl?: string;
            sponsor?: string;
            points: number;
            isPrivate: boolean;
            displayOnStaffCheckIn?: boolean;
            isPro: boolean;
        };
        EventAttendees: {
            eventId: components["schemas"]["EventId"];
            attendees: components["schemas"]["UserId"][];
        };
        EventFollowers: {
            eventId: components["schemas"]["EventId"];
            followers: components["schemas"]["UserId"][];
        };
        /** @example event1 */
        EventId: string;
        EventStatistic: {
            eventId: components["schemas"]["EventId"];
            attendees: number;
        };
        Events: {
            events: components["schemas"]["Event"][];
        };
        /** @enum {string} */
        Gender: "Male" | "Female" | "Non-Binary" | "Other" | "Prefer Not To Answer" | "";
        /** @enum {string} */
        HackInterest: "Attending technical workshops" | "Submitting a project to win prizes" | "Participating in mini-events" | "Meeting new people" | "Working with mentors to get feedback" | "Company Q&As and networking events" | "OTHER";
        /** @enum {string} */
        HackOutreach: "Instagram" | "Twitter/X" | "TikTok" | "Discord" | "Facebook" | "LinkedIn" | "Reddit" | "Word of Mouth" | "CS Department Email" | "Posters/Flyers on Campus" | "Slack" | "HackIllinois Newsletter" | "OTHER";
        ListRoles: {
            userIds: components["schemas"]["UserId"][];
        };
        Location: {
            description: string;
            latitude: number;
            longitude: number;
        };
        MailInfo: {
            templateId: string;
            recipients: string[];
            scheduleTime?: string;
            subs?: {
                [key: string]: unknown;
            };
            recipientSubs?: {
                [key: string]: unknown;
            }[];
        };
        /** @example {
         *       "results": {
         *         "total_rejected_recipients": 0,
         *         "total_accepted_recipients": 1,
         *         "id": "11668787493850529"
         *       }
         *     } */
        MailSendResults: {
            results: {
                total_rejected_recipients: number;
                total_accepted_recipients: number;
                id: string;
            };
        };
        MentorAttendanceRequest: {
            mentorId: components["schemas"]["MentorId"];
        };
        MentorCreateOfficeHours: {
            /** @example Bob the Mentor */
            mentorName: string;
        };
        /** @example a1f25 */
        MentorId: string;
        MentorOfficeHours: components["schemas"]["MentorCreateOfficeHours"] & {
            mentorId: components["schemas"]["MentorId"];
            attendees: components["schemas"]["UserId"][];
        };
        /** @example hackillinois2025_interest */
        NewsletterId: string;
        /** @example {
         *       "newsletterId": "hackillinois2025_interest",
         *       "subscribers": [
         *         "user1",
         *         "user2",
         *         "user3"
         *       ]
         *     } */
        NewsletterSubscription: {
            newsletterId: components["schemas"]["NewsletterId"];
            subscribers: string[];
        };
        NewsletterSubscriptions: components["schemas"]["NewsletterSubscription"][];
        /** @example {
         *       "sender": "google1234",
         *       "title": "This is a test notification",
         *       "body": "blame aydan",
         *       "sent": [
         *         "github1234",
         *         "github1236",
         *         "github1235"
         *       ],
         *       "failed": [
         *         "github1237"
         *       ]
         *     } */
        NotificationMessage: {
            sender: components["schemas"]["UserId"];
            title: string;
            body: string;
            sent: components["schemas"]["UserId"][];
            failed: components["schemas"]["UserId"][];
        };
        NotificationMessages: components["schemas"]["NotificationMessage"][];
        NotificationSend: {
            sent: components["schemas"]["UserId"][];
            failed: components["schemas"]["UserId"][];
            /** @example 532 */
            time_ms: number;
        };
        /** @example {
         *       "title": "This is a test notification",
         *       "body": "blame aydan",
         *       "role": "STAFF"
         *     } */
        NotificationSendRequest: {
            title: string;
            body: string;
            role?: components["schemas"]["Role"];
            eventId?: components["schemas"]["EventId"];
            staffShift?: components["schemas"]["EventId"];
            foodWave?: number;
            userIds?: components["schemas"]["UserId"][];
        };
        Order: {
            userId: components["schemas"]["UserId"];
            /** @example {
             *       "item1": 32,
             *       "item3": 5
             *     } */
            items: {
                [key: string]: number;
            };
        };
        /** @example {
         *       "QRCode": "hackillinois://user?qr=3e7eea9a-7264-4ddf-877d-9e004a888eda"
         *     } */
        OrderQRCode: {
            QRCode: string;
        };
        OrderRedeem: {
            userId: components["schemas"]["UserId"];
            items: {
                itemId: components["schemas"]["ShopItemId"];
                /** @example Cool Item */
                name: string;
                /** @example 5 */
                quantity: number;
            }[];
        };
        /**
         * @description The QR code token. Note: This is not the full hackillinois:// uri but just the QR token part.
         * @example {
         *       "QRCode": "3e7eea9a-7264-4ddf-877d-9e004a888eda"
         *     }
         */
        OrderRedeemRequest: {
            QRCode: string;
        };
        ProfileLeaderboardEntries: {
            profiles: components["schemas"]["ProfileLeaderboardEntry"][];
        };
        ProfileLeaderboardEntry: {
            displayName: string;
            points: number;
            avatarUrl: string;
        };
        /**
         * @description The number of items to return.
         *      Must be [1, 25], inclusive.
         * @example 5
         */
        ProfileLeaderboardQueryLimit: number;
        /**
         * @description The provider to use for authentication. Attendees use GitHub and staff use Google.
         * @example github
         * @enum {string}
         */
        Provider: "github" | "google" | "sponsor";
        /** @description A user's QR code */
        QRInfo: {
            userId: components["schemas"]["UserId"];
            /**
             * @description QR code URI for the user
             * @example hackillinois://user?userToken=abcd
             */
            qrInfo: string;
        };
        RSVPStatistic: {
            accepted: number;
            declined: number;
            pending: number;
        };
        /** @enum {string} */
        Race: "American Indian or Alaska Native" | "Arab or Middle Eastern" | "Black or African American" | "East Asian" | "Hispanic or Latino" | "Native Hawaiian or Pacific Islander" | "South East Asian" | "South Asian" | "White" | "Other" | "Prefer Not To Answer";
        /**
         * @description Must be a valid HTTPS URL (or HTTP for localhost)
         * @example https://hackillinois.org/register
         */
        RedirectUrl: string;
        RegisterDeviceToken: {
            /** @example abcd */
            deviceToken: string;
        };
        /** @example {
         *       "preferredName": "Ronakin",
         *       "legalName": "Ronakin Kanandini",
         *       "emailAddress": "rpak@gmail.org",
         *       "university": "University of Illinois Urbana-Champaign",
         *       "hackEssay1": "I love hack",
         *       "hackEssay2": "I love hack",
         *       "optionalEssay": "",
         *       "resumeFileName": "https://www.google.com",
         *       "location": "Urbana",
         *       "gender": "Prefer Not To Answer",
         *       "degree": "Associates' Degree",
         *       "major": "Computer Science",
         *       "gradYear": 0,
         *       "proEssay": "I wanna be a Knight",
         *       "considerForGeneral": true,
         *       "requestedTravelReimbursement": false,
         *       "dietaryRestrictions": [
         *         "Vegetarian"
         *       ],
         *       "race": [
         *         "Prefer Not To Answer"
         *       ],
         *       "hackInterest": [
         *         "Meeting new people"
         *       ],
         *       "hackOutreach": [
         *         "Instagram"
         *       ],
         *       "userId": "github1234",
         *       "hasSubmitted": false
         *     } */
        RegistrationApplication: components["schemas"]["RegistrationApplicationRequest"] & {
            userId: components["schemas"]["UserId"];
            hasSubmitted: boolean;
        };
        /** @example {
         *       "preferredName": "Ronakin",
         *       "legalName": "Ronakin Kanandini",
         *       "emailAddress": "rpak@gmail.org",
         *       "university": "University of Illinois Urbana-Champaign",
         *       "hackEssay1": "I love hack",
         *       "hackEssay2": "I love hack",
         *       "optionalEssay": "",
         *       "resumeFileName": "https://www.google.com",
         *       "location": "Urbana",
         *       "gender": "Prefer Not To Answer",
         *       "degree": "Associates' Degree",
         *       "major": "Computer Science",
         *       "gradYear": 0,
         *       "proEssay": "I wanna be a Knight",
         *       "considerForGeneral": true,
         *       "requestedTravelReimbursement": false,
         *       "dietaryRestrictions": [
         *         "Vegetarian"
         *       ],
         *       "race": [
         *         "Prefer Not To Answer"
         *       ],
         *       "hackInterest": [
         *         "Meeting new people"
         *       ],
         *       "hackOutreach": [
         *         "Instagram"
         *       ]
         *     } */
        RegistrationApplicationRequest: {
            preferredName: string;
            legalName: string;
            emailAddress: string | "";
            gender: components["schemas"]["Gender"];
            race: components["schemas"]["Race"][];
            resumeFileName?: string;
            requestedTravelReimbursement: boolean;
            location: string;
            degree: components["schemas"]["Degree"];
            major: string;
            minor?: string;
            university: string;
            gradYear: number;
            hackInterest: components["schemas"]["HackInterest"][];
            hackOutreach: components["schemas"]["HackOutreach"][];
            dietaryRestrictions: string[];
            hackEssay1: string;
            hackEssay2: string;
            optionalEssay?: string;
            proEssay?: string;
            considerForGeneral?: boolean;
        };
        /** @example {
         *       "people": {
         *         "Zeus": 36,
         *         "Apollo": 32,
         *         "Athena": 34,
         *         "Hades": 28,
         *         "Hermes": 29,
         *         "Artemis": 30
         *       },
         *       "alliances": [
         *         [
         *           "Zeus",
         *           "Apollo"
         *         ],
         *         [
         *           "Apollo",
         *           "Athena"
         *         ],
         *         [
         *           "Hades",
         *           "Hermes"
         *         ],
         *         [
         *           "Hermes",
         *           "Artemis"
         *         ],
         *         [
         *           "Hades",
         *           "Artemis"
         *         ]
         *       ],
         *       "attempts": 3,
         *       "complete": false
         *     } */
        RegistrationChallengeInput: {
            people: {
                [key: string]: number;
            };
            alliances: string[][];
            attempts: number;
            complete: boolean;
        };
        RegistrationChallengeSolve: {
            /** @example 123 */
            solution: number;
        };
        /** @description If registration is currently open or not */
        RegistrationStatus: {
            alive: boolean;
        };
        ResumeBookEntry: {
            userId: components["schemas"]["UserId"];
            emailAddress: string | "";
            legalName: string;
            location: string;
            university: string;
            degree: components["schemas"]["Degree"];
            major: string;
            minor?: string;
            gradYear: number;
        };
        ResumeBookFilter: {
            graduations?: (number | null)[];
            majors?: string[];
            degrees?: string[];
        };
        ResumeDownloadURL: {
            /** @example https://resume-bucket-dev.s3.us-east-2.amazonaws.com/abcd */
            url: string;
        };
        /** @example {
         *       "url": "https://resume-bucket-dev.s3.us-east-2.amazonaws.com/",
         *       "fields": {
         *         "success_action_status": "201",
         *         "Content-Type": "application/pdf",
         *         "bucket": "resume-bucket-dev",
         *         "X-Amz-Algorithm": "AWS4-HMAC-SHA256",
         *         "X-Amz-Credential": "ABCD/20241013/us-east-2/s3/aws4_request",
         *         "X-Amz-Date": "20241013T081251Z",
         *         "key": "github1234.pdf",
         *         "Policy": "eyJ==",
         *         "X-Amz-Signature": "bfe6f0c382"
         *       }
         *     } */
        ResumeUploadURL: components["schemas"]["ResumeDownloadURL"] & {
            fields?: unknown;
        };
        /**
         * @example USER
         * @enum {string}
         */
        Role: "ADMIN" | "STAFF" | "MENTOR" | "APPLICANT" | "ATTENDEE" | "USER" | "SPONSOR" | "BLOBSTORE" | "PRO";
        Roles: {
            id: components["schemas"]["UserId"];
            roles: components["schemas"]["Role"][];
        };
        ScanAttendee: {
            /** @enum {boolean} */
            success: true;
            userId: components["schemas"]["UserId"];
            /** @example [
             *       "Vegan",
             *       "No Pork"
             *     ] */
            dietaryRestrictions: string[];
        };
        ScanAttendeeRequest: {
            eventId: components["schemas"]["EventId"];
            /**
             * @description The scanned QR code token, not the hackillinois:// uri
             * @example ns6Shwu2
             */
            attendeeQRCode: string;
        };
        ScanEvent: {
            /** @enum {boolean} */
            success: true;
            /**
             * @description Points added from checking into the event
             * @example 5
             */
            points: number;
        };
        ScanEventRequest: {
            eventId: components["schemas"]["EventId"];
        };
        Shifts: {
            shifts: components["schemas"]["Event"][];
        };
        /** @example {
         *       "itemId": "3e7eea9a-7264-4ddf-877d-9e004a888eda",
         *       "name": "HackIllinois Branded Hoodie",
         *       "price": 15,
         *       "isRaffle": true,
         *       "quantity": 1,
         *       "imageURL": "https://raw.githubusercontent.com/HackIllinois/example/avatars/bunny.svg"
         *     } */
        ShopItem: {
            itemId: components["schemas"]["ShopItemId"];
            name: string;
            price: number;
            isRaffle: boolean;
            quantity: number;
            imageURL: string;
        };
        /** @example {
         *       "name": "HackIllinois Branded Hoodie",
         *       "price": 15,
         *       "isRaffle": true,
         *       "quantity": 1,
         *       "imageURL": "https://raw.githubusercontent.com/HackIllinois/example/avatars/bunny.svg"
         *     } */
        ShopItemCreateRequest: {
            name: string;
            price: number;
            isRaffle: boolean;
            quantity: number;
            imageURL: string;
        };
        /** @example 3e7eea9a-7264-4ddf-877d-9e004a888eda */
        ShopItemId: string;
        ShopItemStatistic: {
            itemId: components["schemas"]["ShopItemId"];
            purchased: number;
        };
        /** @example {
         *       "name": "New Name"
         *     } */
        ShopItemUpdateRequest: {
            name?: string;
            price?: number;
            isRaffle?: boolean;
            quantity?: number;
            imageURL?: string;
        };
        ShopItems: components["schemas"]["ShopItem"][];
        Sponsor: {
            userId: components["schemas"]["UserId"];
            email: components["schemas"]["SponsorEmail"];
        };
        /**
         * Format: email
         * @example example@sponsor.com
         */
        SponsorEmail: string;
        SponsorLoginRequest: {
            email: components["schemas"]["SponsorEmail"];
            /** @example 1A3Z56 */
            code: string;
        };
        StatisticLog: {
            timestamp: number;
            events: components["schemas"]["EventStatistic"][];
            decision: components["schemas"]["DecisionStatistic"];
            rsvp: components["schemas"]["RSVPStatistic"];
            shopItems: components["schemas"]["ShopItemStatistic"][];
        };
        /**
         * @description The number of items to return.
         *      Must be [1, 25], inclusive.
         * @example 5
         */
        StatisticLogFilterLimitSchema: number;
        StatisticLoggingStatus: {
            enabled: boolean;
        };
        StatisticLogs: components["schemas"]["StatisticLog"][];
        /** @example {
         *       "listName": "hackillinois2025_interest",
         *       "emailAddress": "example@example.com"
         *     } */
        SubscribeRequest: {
            listName: components["schemas"]["NewsletterId"];
            emailAddress: string;
        };
        /** @example {
         *       "eventId": "event1",
         *       "name": "New Name"
         *     } */
        UpdateEventRequest: {
            isStaff?: boolean;
            name?: string;
            description?: string;
            startTime?: number;
            endTime?: number;
            exp?: number;
            /** @enum {string} */
            eventType?: "MEAL" | "SPEAKER" | "WORKSHOP" | "MINIEVENT" | "QNA" | "MEETING" | "STAFFSHIFT" | "OTHER";
            locations?: components["schemas"]["Location"][];
            isAsync?: boolean;
            mapImageUrl?: string;
            sponsor?: string;
            points?: number;
            isPrivate?: boolean;
            displayOnStaffCheckIn?: boolean;
            isPro?: boolean;
            eventId: components["schemas"]["EventId"];
        };
        /** @description A user's events they are following */
        UserFollowing: {
            userId: components["schemas"]["UserId"];
            following: components["schemas"]["EventId"][];
        };
        /**
         * @description Id of a specific user. Can start with github or google.
         * @example github1234
         */
        UserId: string;
        /** @description A user's info */
        UserInfo: {
            userId: components["schemas"]["UserId"];
            /** @example John Doe */
            name: string;
            /** @example john@doe.com */
            email: string;
        };
        VersionResponse: {
            /**
             * @description The version
             * @example 2024.2.4
             */
            version: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
